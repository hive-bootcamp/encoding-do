package encodingimport (	"encoding/json"	"github.com/hive-bootcamp/final-project-encoding-go/models"	"gopkg.in/yaml.v3"	"os")// JSONData тип для перекодирования из JSON в YAMLtype JSONData struct {	DockerCompose *models.DockerCompose	FileInput     string	FileOutput    string}// YAMLData тип для перекодирования из YAML в JSONtype YAMLData struct {	DockerCompose *models.DockerCompose	FileInput     string	FileOutput    string}// MyEncoder интерфейс для структур YAMLData и JSONDatatype MyEncoder interface {	Encoding() error}// Encoding перекодирует файл из JSON в YAMLfunc (j *JSONData) Encoding() error {	// ниже реализуйте метод	// ...	data, err := os.ReadFile(j.FileInput)	if err != nil {		return err	}	err = json.Unmarshal(data, &j.DockerCompose)	if err != nil {		return err	}	yamlData, err := yaml.Marshal(j.DockerCompose)	if err != nil {		return err	}	err = os.WriteFile(j.FileOutput, yamlData, 0644)	if err != nil {		return err	}	return nil}// Encoding перекодирует файл из YAML в JSONfunc (y *YAMLData) Encoding() error {	// Ниже реализуйте метод	// ...	data, err := os.ReadFile(y.FileInput)	if err != nil {		return err	}	err = yaml.Unmarshal(data, &y.DockerCompose)	if err != nil {		return err	}	jsonData, err := json.MarshalIndent(y.DockerCompose, "", "  ")	if err != nil {		return err	}	err = os.WriteFile(y.FileOutput, jsonData, 0644)	if err != nil {		return err	}	return nil}